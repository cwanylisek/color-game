{"version":3,"sources":["components/BoxDraw/BoxDraw.js","containers/ScoreCounter/ScoreCounter.js","App.js","serviceWorker.js","index.js"],"names":["BoxDraw","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","e","wrap","_context","prev","next","console","log","target","getAttribute","style","backgroundColor","setState","boxColorSelected","boxIdSelected","boxRowSelected","colorCheck","parseInt","state","stop","_x","apply","arguments","cell","row","colorId","cellCount","rowCount","document","querySelectorAll","concat","item","objectSpread","score","colorArray","inherits","createClass","key","value","box","getElementsByClassName","length","x","Math","floor","random","id","prevProps","prevState","handler","boxLine","y","i","push","react_default","createElement","className","onClick","Component","ScoreCounter","App","handlerScorePoints","scorePoints","ScoreCounter_ScoreCounter_ScoreCounter","BoxDraw_BoxDraw_BoxDraw","Boolean","window","location","hostname","match","rootElement","getElementById","ReactDOM","render","App_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.484a08ce.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './BoxDraw.scss';\n\n// const tab = [['1', '2'],['3', '4']];\n// console.log(tab[1][1])\n\nexport class BoxDraw extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            colorArray: ['#173f5f', '#20639b', '#3caea3', '#f6d55c', '#ed553b'],\n            boxColorSelected: [],\n            boxIdSelected: 0,\n            boxRowSelected: 0,\n            rowCount: 5,\n            cellCount: 10,\n            score: 0\n        }\n    }\n\n    componentDidMount() {\n        const box = document.getElementsByClassName('box-container__box');\n        console.log(box[0].style)\n        console.log(box.length)\n\n        for (let x = 0; x < box.length; x++) {\n            box[x].style.backgroundColor = this.state.colorArray[Math.floor(Math.random() * this.state.colorArray.length)]; //set random colors for boxes\n            box[x].id = x; //set uniqe ID for all boxes\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.score !== prevState.score) {\n            this.props.handler(this.state.score)\n        }\n    }\n\n    handleClick = async (e) => {\n        console.log('cell is:' + e.target.getAttribute('cell'), 'row is:' + e.target.getAttribute('row'), 'color is:' + e.target.style.backgroundColor)\n\n        await this.setState({\n            boxColorSelected: e.target.style.backgroundColor,\n            boxIdSelected: e.target.getAttribute('cell'),\n            boxRowSelected: e.target.getAttribute('row')\n        });\n\n        this.colorCheck(parseInt(this.state.boxIdSelected), parseInt(this.state.boxRowSelected), this.state.boxColorSelected)\n    }\n\n    colorCheck = (cell, row, colorId) => {\n        //sprawdzenie czy poza zakresem planszy\n        if (cell < this.state.cellCount && row < this.state.rowCount) {\n\n            console.log('cell', cell, 'row', row, 'colorId', colorId)\n\n            //góra czek\n            if (row > 0) {\n                if (colorId === document.querySelectorAll(`div[row=\"${row - 1}\"][cell=\"${cell}\"]`).item(0).style.backgroundColor) {\n                    console.log('góra');\n                    document.querySelectorAll(`div[row=\"${row}\"][cell=\"${cell}\"]`).item(0).style.backgroundColor = 'white'\n                    document.querySelectorAll(`div[row=\"${row - 1}\"][cell=\"${cell}\"]`).item(0).style.backgroundColor = 'white'\n                    this.colorCheck(cell, row - 1, colorId);\n                    this.setState({\n                        ...this.state.score,\n                        score: this.state.score + 1\n                    });\n                }\n            }\n            //dół czek\n            if (row < this.state.rowCount - 1) {\n                if (colorId === document.querySelectorAll(`div[row=\"${row + 1}\"][cell=\"${cell}\"]`).item(0).style.backgroundColor) {\n                    console.log('doł');\n                    document.querySelectorAll(`div[row=\"${row}\"][cell=\"${cell}\"]`).item(0).style.backgroundColor = 'white'\n                    document.querySelectorAll(`div[row=\"${row + 1}\"][cell=\"${cell}\"]`).item(0).style.backgroundColor = 'white'\n                    this.colorCheck(cell, row + 1, colorId);\n                    this.setState({\n                        ...this.state.score,\n                        score: this.state.score + 1\n                    });\n                }\n            }\n\n            //prawo czek\n            if (cell < this.state.cellCount - 1) {\n                if (colorId === document.querySelectorAll(`div[row=\"${row}\"][cell=\"${cell + 1}\"]`).item(0).style.backgroundColor) {\n                    console.log('prawo');\n                    document.querySelectorAll(`div[row=\"${row}\"][cell=\"${cell}\"]`).item(0).style.backgroundColor = 'white'\n                    document.querySelectorAll(`div[row=\"${row}\"][cell=\"${cell + 1}\"]`).item(0).style.backgroundColor = 'white'\n                    this.colorCheck(cell + 1, row, colorId);\n                    this.setState({\n                        ...this.state.score,\n                        score: this.state.score + 1\n                    });\n                }\n            }\n\n            //lewo czek\n            if (cell > 0) {\n                if (colorId === document.querySelectorAll(`div[row=\"${row}\"][cell=\"${cell - 1}\"]`).item(0).style.backgroundColor) {\n                    console.log('lewo');\n                    document.querySelectorAll(`div[row=\"${row}\"][cell=\"${cell}\"]`).item(0).style.backgroundColor = 'white'\n                    document.querySelectorAll(`div[row=\"${row}\"][cell=\"${cell - 1}\"]`).item(0).style.backgroundColor = 'white'\n                    this.colorCheck(cell - 1, row, colorId);\n                    this.setState({\n                        ...this.state.score,\n                        score: this.state.score + 1\n                    });\n                }\n            }\n        }\n    }\n\n    render() {\n        let boxLine = [];\n        for (let y = 0; y < this.state.rowCount; y++) {\n            let box = [];\n            for (let i = 0; i < this.state.cellCount; i++) {\n                box.push(<div className=\"box-container__box\" onClick={this.handleClick} row={y} cell={i} key={i}></div>);\n            }\n            boxLine.push(\n                <div className=\"box-container__line\" key={y}>\n                    {box}\n                </div>\n            )\n        }\n        return (\n            <div className=\"box-container\">\n                {boxLine}\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './ScoreCounter.scss';\n\nexport const ScoreCounter = (props) => {\n    return (\n        <div className=\"score\">\n            Your score is: <span>{props.score}</span> points!\n        </div>\n    )\n}\n","import React, { Component } from 'react';\n// import { Route } from 'react-router';\nimport { BoxDraw } from './components/BoxDraw/BoxDraw';\nimport { ScoreCounter } from './containers/ScoreCounter/ScoreCounter';\nimport './App.scss';\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            scorePoints: 0\n        }\n    }\n\n    handlerScorePoints = (scorePoints) => {\n        this.setState(() => ({\n            scorePoints\n        }))\n    }\n\n    render() {\n        return(\n            <div className=\"App\">\n                <ScoreCounter score={this.state.scorePoints} />\n                <BoxDraw handler={this.handlerScorePoints} />\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n    <App />, rootElement);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}